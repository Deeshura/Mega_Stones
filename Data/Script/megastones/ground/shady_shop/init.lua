--[[
    init.lua
    Created: 05/09/2024 10:23:04
    Description: Autogenerated script file for the map shady_shop.
]]--
-- Commonly included lua functions and data
require 'origin.common'

-- Package name
local shady_shop = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = STRINGS.MapStrings['SomeStringName']


-------------------------------
-- Map Callbacks
-------------------------------
---shady_shop.Init(map)
--Engine callback function
function shady_shop.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  

  GROUND:RefreshPlayer()

end

---shady_shop.Enter(map)
--Engine callback function
function shady_shop.Enter(map)

  if SV.shady_shop == nil then
    SV.shady_shop =
    {
      ExpositionComplete  = false
    }
  end

  if SV.shady_shop.ExpositionComplete then
    GAME:FadeIn(20)
  else
    shady_shop.Exposition()
  end

end

---shady_shop.Exit(map)
--Engine callback function
function shady_shop.Exit(map)


end

---shady_shop.Update(map)
--Engine callback function
function shady_shop.Update(map)


end

---shady_shop.GameSave(map)
--Engine callback function
function shady_shop.GameSave(map)


end

---shady_shop.GameLoad(map)
--Engine callback function
function shady_shop.GameLoad(map)

  GAME:FadeIn(20)

end

function shady_shop.Exposition()
  GAME:CutsceneMode(true)

  --initialize camera and npc position
  local player = CH('PLAYER')
  local pult = CH('NPC_Shady')
  local dreepy = CH('Dreepy')

  local pult_x = pult.Position.X
  local pult_y = pult.Position.Y

  GROUND:TeleportTo(pult, 775, 153, Dir8.UpRight, 0)
  GROUND:CharSetAnim(pult, "Idle", true)
  GAME:MoveCamera(500, 184, 1, false)

  --title drop
  UI:WaitShowTitle(GAME:GetCurrentGround().Name:ToLocal(), 20);
  GAME:WaitFrames(30);
  UI:WaitHideTitle(20);
  --begin panning camera to the right as screen fades in. 
  --player should move into the room and turn to face pult just as camera scrolls over them? I think anyhow.

  TASK:BranchCoroutine( --
    function()
      GAME:FadeIn(120)
    end
  )

  TASK:BranchCoroutine( --
  function()
    GROUND:MoveInDirection(player, Dir8.Right, 85, false, 1)
    GROUND:CharTurnToChar(player, pult)
  end
)

  GAME:MoveCamera(755, 184, 150, false)

  GAME:WaitFrames(30)

  --pult mumbling to herself

  UI:SetSpeaker(pult)
  UI:SetSpeakerEmotion("Worried")
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_001']))
  GROUND:EntTurn(pult,Dir8.Up)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_002']))
  GROUND:EntTurn(pult,Dir8.UpLeft)
  UI:SetSpeakerReverse(true)
  UI:WaitShowTimedDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_003']), 10)
  GROUND:EntTurn(pult,Dir8.Left)
  GAME:WaitFrames(3)
  GROUND:CharSetEmote(pult, 'shock', 1)
  SOUND:PlayBattleSE('EVT_Emote_Shock')
  GAME:WaitFrames(3)
  GROUND:EntTurn(pult,Dir8.DownLeft)
  GAME:WaitFrames(40)

  UI:SetSpeaker(pult)
  UI:SetSpeakerEmotion("Surprised")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_004']))
  GROUND:CharSetEmote(pult, 'angry', 3)
  UI:SetSpeakerEmotion("Angry")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_005']))

  GAME:WaitFrames(10)

  GROUND:CharSetEmote(pult, 'notice', 1)
  SOUND:PlayBattleSE('EVT_Emote_Exclaim')
  UI:SetSpeaker(dreepy)
  UI:SetSpeakerEmotion("Normal")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_006']))

  GAME:WaitFrames(10)

  UI:SetSpeaker(pult)
  UI:SetSpeakerEmotion("Determined")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_007']))

  GROUND:CharTurnToCharAnimated(pult, dreepy, 3)

  GAME:WaitFrames(60)

  UI:SetSpeaker(pult)
  UI:SetSpeakerEmotion("Sad")
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_008']))
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_009']))

  GAME:WaitFrames(20)

  GROUND:CharTurnToCharAnimated(pult, player, 3)

  GAME:WaitFrames(20)

  UI:SetSpeaker(pult)
  UI:SetSpeakerEmotion("Pain")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_010']))

  UI:SetSpeakerEmotion("Normal")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_011'], CH('NPC_Shady'):GetDisplayName())) --ty flowersnekkkkkkk

  UI:SetSpeakerEmotion("Happy")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_012']))

  UI:SetSpeakerEmotion("Inspired")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_013']))

  UI:SetSpeakerEmotion("Inspired")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_014']))

  --player is confused

  GAME:WaitFrames(60)
  GROUND:CharSetEmote(player, 'question', 1)
  SOUND:PlayBattleSE('EVT_Emote_Confused')
  GAME:WaitFrames(60)

  local function absweat()
    TASK:BranchCoroutine(
      function()
        GROUND:CharSetEmote(pult, 'sweating', 1)
        SOUND:PlayBattleSE('EVT_Emote_Sweating')
      end
    )
  end

  UI:SetSpeakerEmotion("Stunned")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_015']), {absweat})

  UI:SetSpeakerEmotion("Worried")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_016']))

  UI:SetSpeakerEmotion("Joyous")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_017']))

  UI:SetSpeakerEmotion("Inspired")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_018']))

  TASK:BranchCoroutine(
    function()
      GROUND:MoveToPosition(pult, pult_x, pult_y, false, 1)
      GROUND:CharTurnToCharAnimated(pult, player, 3)
      GROUND:CharSetAnim(pult, "Idle", true)
    end
  )

  UI:SetSpeakerEmotion("Inspired")
  UI:SetSpeakerReverse(true)
  UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Exposition_019']))

  GAME:MoveCamera(0, 0, 60, true)

  GAME:CutsceneMode(false)

  --end exposition

  SV.shady_shop.ExpositionComplete = true

end


-------------------------------
-- Entities Callbacks
-------------------------------

function shady_shop.Exit_Touch(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine

  local dungeon_entrances = { }
  local ground_entrances = {{Flag=true,Zone='guildmaster_island',ID=4,Entry=2}}
  COMMON.ShowDestinationMenu(dungeon_entrances,ground_entrances)
end

function shady_shop.NPC_Shady_Action(obj, activator)
  DEBUG.EnableDbgCoro() --Enable debugging this coroutine

  local state = 0
  local repeated = false
  local cart = {}
  local catalog = { }
  local stones = {{Index = 'mega_abomasite', Amount = 0, Price = 10000},
                  {Index = 'mega_absolite', Amount = 0, Price = 10000},
                  {Index = 'mega_aerodactylite', Amount = 0, Price = 10000},
                  {Index = 'mega_aggronite', Amount = 0, Price = 10000},
                  {Index = 'mega_alakazite', Amount = 0, Price = 10000},
                  {Index = 'mega_altarianite', Amount = 0, Price = 10000},
                  {Index = 'mega_ampharosite', Amount = 0, Price = 10000},
                  {Index = 'mega_audinite', Amount = 0, Price = 10000},
                  {Index = 'mega_banettite', Amount = 0, Price = 10000},
                  {Index = 'mega_beedrillite', Amount = 0, Price = 10000},
                  {Index = 'mega_blastoisinite', Amount = 0, Price = 10000},
                  {Index = 'mega_blazikenite', Amount = 0, Price = 10000},
                  {Index = 'mega_cameruptite', Amount = 0, Price = 10000},
                  {Index = 'mega_charizardite_x', Amount = 0, Price = 10000},
                  {Index = 'mega_charizardite_y', Amount = 0, Price = 10000},
                  {Index = 'mega_diancite', Amount = 0, Price = 10000},
                  {Index = 'mega_galladite', Amount = 0, Price = 10000},
                  {Index = 'mega_garchompite', Amount = 0, Price = 10000},
                  {Index = 'mega_gardevoirite', Amount = 0, Price = 10000},
                  {Index = 'mega_gengarite', Amount = 0, Price = 10000},
                  {Index = 'mega_glalitite', Amount = 0, Price = 10000},
                  {Index = 'mega_gyaradosite', Amount = 0, Price = 10000},
                  {Index = 'mega_heracronite', Amount = 0, Price = 10000},
                  {Index = 'mega_houndoominite', Amount = 0, Price = 10000},
                  {Index = 'mega_kangaskhanite', Amount = 0, Price = 10000},
                  {Index = 'mega_lopunnite', Amount = 0, Price = 10000},
                  {Index = 'mega_lucarionite', Amount = 0, Price = 10000},
                  {Index = 'mega_manectite', Amount = 0, Price = 10000},
                  {Index = 'mega_mawilite', Amount = 0, Price = 10000},
                  {Index = 'mega_medichamite', Amount = 0, Price = 10000},
                  {Index = 'mega_metagrossite', Amount = 0, Price = 10000},
                  {Index = 'mega_pidgeotite', Amount = 0, Price = 10000},
                  {Index = 'mega_pinsirite', Amount = 0, Price = 10000},
                  {Index = 'mega_sablenite', Amount = 0, Price = 10000},
                  {Index = 'mega_salamencite', Amount = 0, Price = 10000},
                  {Index = 'mega_sceptilite', Amount = 0, Price = 10000},
                  {Index = 'mega_scizorite', Amount = 0, Price = 10000},
                  {Index = 'mega_sharpedonite', Amount = 0, Price = 10000},
                  {Index = 'mega_slowbronite', Amount = 0, Price = 10000},
                  {Index = 'mega_steelixite', Amount = 0, Price = 10000},
                  {Index = 'mega_swampertite', Amount = 0, Price = 10000},
                  {Index = 'mega_tyranitarite', Amount = 0, Price = 10000},
                  {Index = 'mega_venusaurite', Amount = 0, Price = 10000}} --they're not adding more of these until z-a anyway
  for ii = 1, #stones, 1 do
    local base_data = stones[ii]
    local item_data = { Item = RogueEssence.Dungeon.InvItem(base_data.Index, false, base_data.Amount), Price = base_data.Price }
    if _DATA:GetItem(base_data.Index).Released then
      table.insert(catalog, item_data)
    end
  end


  local chara = CH('NPC_Shady')
  local player = CH('PLAYER')

  GROUND:CharTurnToChar(chara, player)
  UI:SetSpeaker(chara)

	while state > -1 do
		if state == 0 then
			local msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro'])
			if repeated == true then
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Intro_Return'])
			end
			local shop_choices = {STRINGS:Format(STRINGS.MapStrings['Shop_Option_Buy']), STRINGS:Format(STRINGS.MapStrings['Shop_Option_Sell']),
			STRINGS:FormatKey("MENU_INFO"),
			STRINGS:FormatKey("MENU_EXIT")}
      UI:SetSpeakerEmotion("Normal")
			UI:BeginChoiceMenu(msg, shop_choices, 1, 4)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			repeated = true
			if result == 1 then
				if #catalog > 0 then
					--TODO: use the enum instead of a hardcoded number
          UI:SetSpeakerEmotion("Happy")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy'], STRINGS:LocalKeyString(26)))
          UI:SetSpeakerEmotion("Normal")
					state = 1
				else
          UI:SetSpeakerEmotion("Sigh")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Empty']))
          UI:SetSpeakerEmotion("Normal")
				end
			elseif result == 2 then
        UI:SetSpeakerEmotion("Pain")
        UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell'], _DATA:GetMonster("kecleon"):GetColoredName()))
        UI:SetSpeakerEmotion("Normal")
			elseif result == 3 then
        UI:SetSpeakerEmotion("Joyous")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_001']))
        UI:SetSpeakerEmotion("Pain")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_002']))
        UI:SetSpeakerEmotion("Worried")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_003']))
        UI:SetSpeakerEmotion("Determined")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Info_004']))
        UI:SetSpeakerEmotion("Normal")
			else
        UI:SetSpeakerEmotion("Happy")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Goodbye']))
				state = -1
			end
		elseif state == 1 then
			UI:ShopMenu(catalog)
			UI:WaitForChoice()
			local result = UI:ChoiceResult()
			if #result > 0 then
				local bag_count = GAME:GetPlayerBagCount() + GAME:GetPlayerEquippedCount()
				local bag_cap = GAME:GetPlayerBagLimit()
				if bag_count == bag_cap then
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Bag_Full']))
					UI:SetSpeakerEmotion("Normal")
				else
					cart = result
					state = 2
				end
			else
				state = 0
			end
		elseif state == 2 then
			local total = 0
			for ii = 1, #cart, 1 do
				total = total + catalog[cart[ii]].Price
			end
			local msg
			if total > GAME:GetPlayerMoney() then
				UI:SetSpeakerEmotion("Angry")
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_No_Money']))
				UI:SetSpeakerEmotion("Normal")
				state = 1
			else
				if #cart == 1 then
					local name = catalog[cart[1]].Item:GetDisplayName()
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), name)
				else
					msg = STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
				end
				UI:ChoiceMenuYesNo(msg, false)
				UI:WaitForChoice()
				result = UI:ChoiceResult()

				if result then
					GAME:RemoveFromPlayerMoney(total)
					for ii = 1, #cart, 1 do
						local item = catalog[cart[ii]].Item
						GAME:GivePlayerItem(item.ID, item.Amount, false)
					end
					for ii = #cart, 1, -1 do
						table.remove(catalog, cart[ii])
						table.remove(SV.base_shop, cart[ii])
					end

					cart = {}
					SOUND:PlayBattleSE("DUN_Money")
					UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Buy_Complete']))
					state = 0
				else
					state = 1
				end
			end
		elseif state == 3 then
			UI:SellMenu()
			UI:WaitForChoice()
			local result = UI:ChoiceResult()

			if #result > 0 then
				cart = result
				state = 4
			else
				state = 0
			end
		elseif state == 4 then
			local total = 0
			for ii = 1, #cart, 1 do
				local item
				if cart[ii].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[ii].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[ii].Slot)
				end
				total = total + item:GetSellValue()
			end
			local msg
			if #cart == 1 then
				local item
				if cart[1].IsEquipped then
					item = GAME:GetPlayerEquippedItem(cart[1].Slot)
				else
					item = GAME:GetPlayerBagItem(cart[1].Slot)
				end
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_One'], STRINGS:FormatKey("MONEY_AMOUNT", total), item:GetDisplayName())
			else
				msg = STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Multi'], STRINGS:FormatKey("MONEY_AMOUNT", total))
			end
			UI:ChoiceMenuYesNo(msg, false)
			UI:WaitForChoice()
			result = UI:ChoiceResult()

			if result then
				for ii = #cart, 1, -1 do
					if cart[ii].IsEquipped then
						GAME:TakePlayerEquippedItem(cart[ii].Slot, true)
					else
						GAME:TakePlayerBagItem(cart[ii].Slot, true)
					end
				end
				SOUND:PlayBattleSE("DUN_Money")
				GAME:AddToPlayerMoney(total)
				cart = {}
				UI:WaitShowDialogue(STRINGS:Format(STRINGS.MapStrings['Shop_Sell_Complete']))
				state = 0
			else
				state = 3
			end
		end
	end
end

return shady_shop

